#!/bin/bash

# Port Configuration Script for Fake Google
# This script helps configure ports for multi-app deployments

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default ports
DEFAULT_APP_PORT=3001
DEFAULT_DB_PORT=5433
DEFAULT_DEV_APP_PORT=3002
DEFAULT_DEV_DB_PORT=5434

# Function to check if a port is in use
check_port() {
    local port=$1
    if lsof -ti:$port >/dev/null 2>&1; then
        return 0  # Port is in use
    else
        return 1  # Port is free
    fi
}

# Function to suggest next available port
suggest_port() {
    local start_port=$1
    local current_port=$start_port
    
    while check_port $current_port; do
        ((current_port++))
        if [ $current_port -gt $((start_port + 100)) ]; then
            echo "0"  # Give up after checking 100 ports
            return
        fi
    done
    
    echo $current_port
}

# Function to show current port usage
show_port_status() {
    echo -e "${BLUE}📊 Current Port Usage:${NC}"
    echo ""
    
    # Common application ports
    local common_ports=(3000 3001 3002 3003 5432 5433 5434 5435 8000 8080 8443 9000)
    
    for port in "${common_ports[@]}"; do
        if check_port $port; then
            echo -e "   Port $port: ${RED}❌ In use${NC}"
        else
            echo -e "   Port $port: ${GREEN}✅ Available${NC}"
        fi
    done
    echo ""
}

# Function to create environment file with port configuration
create_env_file() {
    local app_port=$1
    local db_port=$2
    local dev_app_port=$3
    local dev_db_port=$4
    local env_file="${5:-.env}"
    
    echo -e "${YELLOW}📝 Creating environment file: $env_file${NC}"
    
    cat > "$env_file" << EOF
# Fake Google Environment Configuration
# Generated by port-config.sh on $(date)

# Port Configuration (for multi-app deployments)
# Production ports
APP_PORT=$app_port
DB_PORT=$db_port

# Development ports
DEV_APP_PORT=$dev_app_port
DEV_DB_PORT=$dev_db_port

# Database Configuration
DATABASE_URL=postgres://postgres:admin@localhost:$db_port/fakegoogle
DATABASE_ADMIN_URL=postgres://postgres:admin@localhost:$db_port/postgres

# Google APIs (Optional)
GOOGLE_SEARCH_API_KEY=your_google_search_api_key_here
GOOGLE_SEARCH_ENGINE_ID=your_custom_search_engine_id_here
GOOGLE_GEMINI_API_KEY=your_google_gemini_api_key_here

# Application Configuration
NODE_ENV=production
COMPOSE_PROJECT_NAME=fake-google
EOF
    
    echo -e "${GREEN}✅ Environment file created: $env_file${NC}"
}

# Function to show configuration summary
show_config_summary() {
    local app_port=$1
    local db_port=$2
    local dev_app_port=$3
    local dev_db_port=$4
    
    echo -e "${BLUE}📋 Configuration Summary:${NC}"
    echo ""
    echo "   Production:"
    echo "     Application: http://localhost:$app_port"
    echo "     Database:    localhost:$db_port"
    echo ""
    echo "   Development:"
    echo "     Application: http://localhost:$dev_app_port"
    echo "     Database:    localhost:$dev_db_port"
    echo ""
    echo "   Admin Panel: http://localhost:$app_port/admin (production)"
    echo "   Admin Panel: http://localhost:$dev_app_port/admin (development)"
    echo ""
}

# Function for interactive configuration
interactive_config() {
    echo -e "${BLUE}🔧 Interactive Port Configuration${NC}"
    echo "=============================================="
    echo ""
    
    show_port_status
    
    # App port configuration
    echo -e "${YELLOW}Application Port Configuration:${NC}"
    if check_port $DEFAULT_APP_PORT; then
        local suggested_app=$(suggest_port $DEFAULT_APP_PORT)
        echo -e "   Default port $DEFAULT_APP_PORT is ${RED}in use${NC}"
        echo -e "   Suggested port: ${GREEN}$suggested_app${NC}"
        read -p "   Enter application port [$suggested_app]: " app_port
        app_port=${app_port:-$suggested_app}
    else
        echo -e "   Default port $DEFAULT_APP_PORT is ${GREEN}available${NC}"
        read -p "   Enter application port [$DEFAULT_APP_PORT]: " app_port
        app_port=${app_port:-$DEFAULT_APP_PORT}
    fi
    
    # Database port configuration
    echo ""
    echo -e "${YELLOW}Database Port Configuration:${NC}"
    if check_port $DEFAULT_DB_PORT; then
        local suggested_db=$(suggest_port $DEFAULT_DB_PORT)
        echo -e "   Default port $DEFAULT_DB_PORT is ${RED}in use${NC}"
        echo -e "   Suggested port: ${GREEN}$suggested_db${NC}"
        read -p "   Enter database port [$suggested_db]: " db_port
        db_port=${db_port:-$suggested_db}
    else
        echo -e "   Default port $DEFAULT_DB_PORT is ${GREEN}available${NC}"
        read -p "   Enter database port [$DEFAULT_DB_PORT]: " db_port
        db_port=${db_port:-$DEFAULT_DB_PORT}
    fi
    
    # Development ports
    echo ""
    echo -e "${YELLOW}Development Ports (optional):${NC}"
    local suggested_dev_app=$(suggest_port $DEFAULT_DEV_APP_PORT)
    local suggested_dev_db=$(suggest_port $DEFAULT_DEV_DB_PORT)
    
    read -p "   Enter dev application port [$suggested_dev_app]: " dev_app_port
    dev_app_port=${dev_app_port:-$suggested_dev_app}
    
    read -p "   Enter dev database port [$suggested_dev_db]: " dev_db_port
    dev_db_port=${dev_db_port:-$suggested_dev_db}
    
    echo ""
    show_config_summary $app_port $db_port $dev_app_port $dev_db_port
    
    echo -e "${YELLOW}Create environment file?${NC}"
    read -p "   Enter filename [.env]: " env_file
    env_file=${env_file:-.env}
    
    create_env_file $app_port $db_port $dev_app_port $dev_db_port "$env_file"
    
    echo ""
    echo -e "${GREEN}🎉 Configuration complete!${NC}"
    echo ""
    echo -e "${BLUE}Next steps:${NC}"
    echo "   1. Review the generated $env_file file"
    echo "   2. Run: ./docker-deploy.sh"
    echo "   3. Access your app at: http://localhost:$app_port"
}

# Function for preset configurations
preset_config() {
    local preset=$1
    
    case $preset in
        "single")
            echo -e "${BLUE}📱 Single App Configuration${NC}"
            create_env_file 3000 5432 3000 5432 ".env"
            show_config_summary 3000 5432 3000 5432
            ;;
        "multi")
            echo -e "${BLUE}🏢 Multi-App Configuration${NC}"
            create_env_file 3001 5433 3002 5434 ".env"
            show_config_summary 3001 5433 3002 5434
            ;;
        "staging")
            echo -e "${BLUE}🎭 Staging Configuration${NC}"
            create_env_file 3010 5440 3011 5441 ".env.staging"
            show_config_summary 3010 5440 3011 5441
            ;;
        *)
            echo -e "${RED}Unknown preset: $preset${NC}"
            echo "Available presets: single, multi, staging"
            exit 1
            ;;
    esac
}

# Help function
show_help() {
    echo "Usage: $0 [command] [options]"
    echo ""
    echo "Commands:"
    echo "  interactive, -i     Interactive port configuration"
    echo "  status, -s          Show current port usage"
    echo "  preset <name>       Use a preset configuration"
    echo "  help, -h            Show this help message"
    echo ""
    echo "Preset Options:"
    echo "  single             Single app deployment (ports 3000, 5432)"
    echo "  multi              Multi-app deployment (ports 3001, 5433)"
    echo "  staging            Staging environment (ports 3010, 5440)"
    echo ""
    echo "Examples:"
    echo "  $0 interactive           # Interactive configuration"
    echo "  $0 status               # Show port usage"
    echo "  $0 preset multi         # Multi-app preset"
}

# Main function
main() {
    case "${1:-interactive}" in
        "interactive"|"-i")
            interactive_config
            ;;
        "status"|"-s")
            show_port_status
            ;;
        "preset")
            if [ -z "$2" ]; then
                echo -e "${RED}Error: Please specify a preset name${NC}"
                show_help
                exit 1
            fi
            preset_config "$2"
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            echo -e "${RED}Unknown command: $1${NC}"
            show_help
            exit 1
            ;;
    esac
}

# Check if lsof is available
if ! command -v lsof >/dev/null 2>&1; then
    echo -e "${YELLOW}Warning: lsof not found. Port checking may not work properly.${NC}"
fi

# Run main function
main "$@"
